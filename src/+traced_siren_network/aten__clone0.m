classdef aten__clone0 < nnet.layer.Layer & nnet.layer.Formattable & ...
        nnet.layer.AutogeneratedFromPyTorch
    %aten__clone0 Auto-generated custom layer
    % Auto-generated by MATLAB on 29-Jan-2025 11:25:59
    
    properties (Learnable)
        % Networks (type dlnetwork)
        
    end
    
    properties
        % Non-Trainable Parameters
        clone_5
        
        
        
    end
    
    properties (Learnable)
        % Trainable Parameters
        
    end
    
    methods
        function obj = aten__clone0(Name, Type, InputNames, OutputNames)
            obj.Name = Name;
            obj.Type = Type;
            obj.NumInputs = 1;
            obj.NumOutputs = 2;
            obj.InputNames = InputNames;
            obj.OutputNames = OutputNames;
        end
        
        function [clone_6, clone_6_rank] = predict(obj,clone_coords_1)
            import traced_siren_network.ops.*;
            
            %Validates that the input has the correct format and permutes its dimensions into the reverse of the original PyTorch format.
            validateInput(clone_coords_1,'');
            [clone_coords_1, clone_coords_1_format] = permuteInputToReversePyTorch(clone_coords_1, '');
            if ~contains(clone_coords_1_format,'U')
                [clone_coords_1] = struct('value', clone_coords_1, 'rank', numel(clone_coords_1_format));
            end
            
            [clone_5] = makeStructForConstant(double(obj.clone_5), int64(0), "Typed");
            clone_6 = clone_coords_1;
            [clone_6_rank] = ones([1,clone_6.rank], 'single');
            clone_6_rank = dlarray(clone_6_rank,'UU');
            %Permute U-labelled output to forward PyTorch dimension ordering
            if(any(dims(clone_6.value) == 'U'))
                clone_6 = permute(clone_6.value, fliplr(1:max(2,clone_6.rank)));
            end
            
        end
        
        
        
        function [clone_6, clone_6_rank] = forward(obj,clone_coords_1)
            import traced_siren_network.ops.*;
            
            %Validates that the input has the correct format and permutes its dimensions into the reverse of the original PyTorch format.
            validateInput(clone_coords_1,'');
            [clone_coords_1, clone_coords_1_format] = permuteInputToReversePyTorch(clone_coords_1, '');
            if ~contains(clone_coords_1_format,'U')
                [clone_coords_1] = struct('value', clone_coords_1, 'rank', numel(clone_coords_1_format));
            end
            
            [clone_5] = makeStructForConstant(double(obj.clone_5), int64(0), "Typed");
            clone_6 = clone_coords_1;
            [clone_6_rank] = ones([1,clone_6.rank], 'single');
            clone_6_rank = dlarray(clone_6_rank,'UU');
            %Permute U-labelled output to forward PyTorch dimension ordering
            if(any(dims(clone_6.value) == 'U'))
                clone_6 = permute(clone_6.value, fliplr(1:max(2,clone_6.rank)));
            end
            
        end
        
        
    end
end

